package io.cucumber.java;

/*
import io.cucumber.java.After;
import io.cucumber.java.Scenario;
import org.h2.store.fs.FileUtils;
import org.junit.jupiter.api.Test;
import org.junit.platform.commons.logging.Logger;
import org.junit.platform.commons.logging.LoggerFactory;
import org.openqa.selenium.*;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
*/

import javax.imageio.ImageIO;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.function.Supplier;

/* RATIONALIZE */
import org.junit.jupiter.api.Test;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.DesiredCapabilities;

import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;

//import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import javax.imageio.ImageIO;

import org.apache.commons.io.FileUtils;
//import org.junit.AfterClass;
//import org.junit.BeforeClass;
//import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.Capabilities;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.DesiredCapabilities;

import ru.yandex.qatools.ashot.AShot;
import ru.yandex.qatools.ashot.Screenshot;
import ru.yandex.qatools.ashot.coordinates.WebDriverCoordsProvider;
import ru.yandex.qatools.ashot.shooting.ShootingStrategies;

/* END RATIONALIZATION */

public class ScreenshotTest {

    private static WebDriver driver;
    // private static final String FOLDER = "../uiuc.cs427.cucumber";
    private static final String FOLDER = "/Users/jerrytan/cs427";
    private static final Logger logger = LoggerFactory.getLogger(ScreenshotTest.class);

    @Before
    public void init() {
        logger.info(new Supplier<String>() {
            public String get() {
                return "init ScreenshotTest..";
            }
        });
        System.setProperty("webdriver.gecko.driver", "/Users/jerrytan/Downloads/geckodriver 2");
        driver = new FirefoxDriver();

        driver.get("http://apttest.in");

        try {
            // take screenshot with driver and persist to location specified in
            // output
            File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

            // copy file with apache file utils
            org.apache.commons.io.FileUtils.copyFile(screenshot,
                new File("/Users/jerrytan/Downloads/cs427.ScreenshotTest.jpeg"));

        } catch (Exception e) {
            // take screenshot if exception thrown
            System.out.println("Failure to take screenshot " + e);

        } finally {
            // finally block to release resources, as appropriate.
            driver.quit();
        }

    }// init

    @After
    public void after(Scenario scenario) {
        if (scenario.isFailed()) {
            byte[] data = null;
            scenario.attach(data, "image/png", "My Test Screenshot When Scenario Fails");
        } // if
        if (!scenario.isFailed()) {
            byte[] data = null;
            scenario.attach(data, "image/png", "My Test Screenshot When Scenario Passes");
        } // if
    }// after

    @Test
    public void testTakeScreenShotElement() throws IOException {
        try {
            driver.get("https://www.perfecto.io/blog/cucumber-vs-selenium");
            takeScreenShot(driver.findElement(By.id("path-node page-node-type-blog")));
        } catch (Exception x) {
            logger.debug(new Supplier<String>() {
                public String get() {
                    return x.getMessage();
                }
            });
        }
    }// test

    public void takeScreenShot(WebElement element) throws IOException {
        File screen = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
        Point p = element.getLocation();
        Rectangle rect = new Rectangle(0, 0, element.getSize().getWidth(), element.getSize().getHeight());
        BufferedImage img = ImageIO.read(screen);
        BufferedImage dest = img.getSubimage(p.getX(), p.getY(), rect.width, rect.height);
        ImageIO.write(dest, "png", screen);
        File da = new File(FOLDER + System.nanoTime() + ".png");
        System.out.println("APPLE PIE: " + da.toPath());
        logger.info(new Supplier<String>() {
            public String get() {
                return "APPLE PIE: " + da.getPath();
            }
        });
        org.apache.commons.io.FileUtils.copyFile(screen, da);
        // org.apache.commons.io.FileUtils.copyFile(screen, new File(FOLDER +
        // System.nanoTime() + ".png"));
    }
}// class
